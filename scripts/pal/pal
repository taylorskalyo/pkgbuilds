#!/bin/bash

# Apply theme colors.
#
# Basically pywal + functions to apply themes

set -e

XDG_CONFIG_DIR="${XDG_CONFIG_DIR:=$HOME/.config}"
XDG_CACHE_DIR="${XDG_CACHE_DIR:=$HOME/.cache}"
WAL_CACHE="${XDG_CACHE_DIR}/wal"

apply_oomox() {
  local theme
  theme=${WAL_CACHE}/colors-oomox

  command -v oomox-cli >/dev/null || return 1
  [ -e "${theme}" ] || return 1

  oomox-cli "${theme}" -o oomox-wal -t ~/.themes -m all
  gsettings set org.gnome.desktop.interface gtk-theme oomox-wal
  printf "%b\n" "[\e[1;32mI\e[0m] \e[1;31mpal\e[0m: Built oomox theme."
}

apply_terminal() {
  local theme
  theme=${WAL_CACHE}/colors-theme.sh

  # Pywal's built-in terminal handling isn't as robust as theme.sh's. In
  # particular theme.sh handles tmux better.
  command -v theme.sh >/dev/null || return 1
  [ -e "${theme}" ] || return 1

  theme.sh < "${theme}"
  printf "%b\n" "[\e[1;32mI\e[0m] \e[1;31mpal\e[0m: Applied terminal theme."
}

apply_swaylock() {
  local theme swaylock_config
  theme=${WAL_CACHE}/colors-swaylock
  swaylock_config=${XDG_CONFIG_DIR}/swaylock/config

  command -v swaylock >/dev/null || return 1
  [ -e "${theme}" ] || return 1
  [ -e "${swaylock_config}" ] && return 0 # don't overwrite config

  mkdir -p "${swaylock_config%/*}"
  ln -s "${theme}" "${swaylock_config}"
  printf "%b\n" "[\e[1;32mI\e[0m] \e[1;31mpal\e[0m: Linked swaylock config."
}

apply_service() {
  local service=$1

  systemctl --user is-active "${service}".service | grep '^active' > /dev/null || return 1

  systemctl --user restart "${service}".service
  printf "%b\n" "[\e[1;32mI\e[0m] \e[1;31mpal\e[0m: Restarted ${service}."
}

apply_swaync() {
  command -v swaync-client >/dev/null || return 1

  swaync-client -rs -sw
  printf "%b\n" "[\e[1;32mI\e[0m] \e[1;31mpal\e[0m: Restarted swaync."
}

wal -st --theme default "$@"

apply_oomox &
apply_terminal &
apply_swaylock &
apply_swaync &
apply_service eww &
apply_service mako &
apply_service swaybg &
apply_service waybar &
wait
