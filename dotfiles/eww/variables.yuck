;;;;;;;;;;;;;;;;;;;;;;;;
; Static variables
;;;;;;;;;;;;;;;;;;;;;;;;

; Toggles
(defvar is_bluetooth true)
(defvar is_dnd false)
(defvar is_night_light true)

; Modals
(defvar modal_selected -1)
(defvar modal_index '{
  "bluetooth": 0,
  "internet": 1
  }'
)

; Size used for images/icons
(defvar icon_size 14)

; Show/hide shade
(defvar is_shade false)

; Show/hide volume
(defvar is_volume false)

; Show/hide volume mode selector
(defvar is_volume_mode false)

; Show/hide notification history
(defvar is_notif_hist false)

; Active notifications
(defvar jq_notif_list "[ .[] | select(.dismissed == false and .hints.transient == null) ]")
;(defvar jq_notif_list "[ .[] | select(.dismissed == false) ]")

; All notifications
(defvar jq_notif_hist "[ .[] | select(.hints.transient == null) ]")

; Heads-up notification
(defvar jq_notif_head "[ .[] | select(.dismissed == false and .hints.transient == null) ][0]")

; Volume notification
(defvar jq_notif_vol "[ .[] | select(.dismissed == false and .hints.transient != null and .hints.[\"x-canonical-private-synchronous\"] == \"volume\") ][0]")

; Per-app notification indicators
(defvar jq_notif_icon "[ .[] | select(.dismissed == false and .hints.transient == null) ] | group_by(.app_name) | map({app_name: first.app_name, app_icon: first.app_icon, hints: first.hints})")

; Networks to show in status bar
(defvar jq_nets_status "[ .[] | select(.state | test(\"^connected|^off\")) ]")

; Wlan network
(defvar jq_net_wlan ".[] | select(.type == \"wlan\")")

; Text icons
; - bluetooth: https://git.kernel.org/pub/scm/bluetooth/bluez.git/tree/src/dbus-common.c
(defvar icons '{
  "battery.charging": [ "󰢟", "󰢜", "󰂆", "󰂇", "󰂈", "󰢝", "󰂉", "󰢞", "󰂊", "󰂋", "󰂅" ],
  "battery.discharging": [ "󰂎", "󰁺", "󰁻", "󰁼", "󰁽", "󰁾", "󰁿", "󰂀", "󰂁", "󰂂", "󰁹" ],
  "battery.full": [ "󱟢" ],
  "battery.plugged": [ "󰂅" ],
  "battery.unknown": [ "" ],
  "bluetooth.audio": [ "󰂰" ],
  "bluetooth.audio-card": [ "󰓃" ],
  "bluetooth.audio-headphones": [ "󰋋" ],
  "bluetooth.audio-headset": [ "󰋎" ],
  "bluetooth.audio-video": [ "󰤽" ],
  "bluetooth.camera-photo": [ "󰄀" ],
  "bluetooth.camera-video": [ "󰕧" ],
  "bluetooth.computer": [ "󰌢" ],
  "bluetooth.connected": [ "󰂱" ],
  "bluetooth.input-gaming": [ "󰊖" ],
  "bluetooth.input-keyboard": [ "󰌌" ],
  "bluetooth.input-mouse": [ "󰍽" ],
  "bluetooth.input-tablet": [ "󰏪" ],
  "bluetooth.modem": [ "󰑩" ],
  "bluetooth.multimedia-player": [ "󰝚" ],
  "bluetooth.network-wireless": [ "󰀂" ],
  "bluetooth.off": [ "󰂲" ],
  "bluetooth.on": [ "󰂯" ],
  "bluetooth.phone": [ "󰄜" ],
  "bluetooth.scanner": [ "󰚫" ],
  "bluetooth.unknown": [ "󰾰" ],
  "bluetooth.video-display": [ "󰍹" ],
  "brightness": ["󰃞", "󰃟", "󰃠"],
  "ether.connected": ["󰈀"],
  "ether.disconnected": ["󰕑"],
  "ether.off": ["󰪎"],
  "mic": ["󰍬"],
  "mic-mute": ["󰍭"],
  "volume": ["󰕿", "󰖀", "󰕾"],
  "volume-alt": ["󰎇"],
  "volume-mute": ["󰸈", "󰖁"],
  "volume-mute-alt": ["󰎊"],
  "web.connected": ["󰖟"],
  "web.disconnected": ["󰕑"],
  "web.off": ["󰪎"],
  "wlan.connected": ["󰤯", "󰤟", "󰤢", "󰤥", "󰤨"],
  "wlan.disconnected": ["󰤫"],
  "wlan.off": ["󰤮"]
  }'
)

;;;;;;;;;;;;;;;;;;;;;;;;
; Dynamic variables
;;;;;;;;;;;;;;;;;;;;;;;;

(deflisten battery
  :initial '{
    "percentage":0,
    "plugged_at":0,
    "remaining":"",
    "state":"unknown"
    }'
  `scripts/battery.sh`
)

(deflisten bluetooth
  :initial '{
    "icon": "bluetooth.off",
    "discovering": false,
    "powered": false,
    "devices": []
    }'
    `scripts/bluetooth.sh`
)

(deflisten network
  :initial '{
    "icon": "web.disconnected",
    "percentage": 0,
    "label": "Disconnected",
    "state": "disconnected",
    "disabled": true,
    "all": [],
    "wlan_stations": []
    }'
    `scripts/network.sh`
)

(deflisten workspaces
  :initial '{
    "all":[],
    "active":1
    }'
  `scripts/workspaces.sh`
)

(deflisten notifications
  :initial '[]'
  `scripts/notifications.py`
)

(deflisten volume
  :initial '{
    "out":{"percentage":100,"mute":false},
    "in":{"percentage":100,"mute":false}
    }'
  `scripts/volume.sh`
)

(deflisten updates
  :initial '{}'
  `scripts/updates.sh`
)

(deflisten screen
  :initial '{
    "brightness":100,
    "temperature":6500
    }'
  `scripts/screen.sh`
)

;(defpoll bluetoothscan
;  :interval "30s"
;  :run-while { modal_selected == modal_index["bluetooth"] }
;  `bluetoothctl --timeout 25 scan on`
;)
